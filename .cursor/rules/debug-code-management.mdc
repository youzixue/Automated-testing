---
description: 确保调试和修复过程中保持代码库整洁，删除临时文件，遵循架构设计
globs: ["**/*.py"]
alwaysApply: true
priority: 25
---
# 调试代码管理规范

在调试和修复问题过程中必须保持代码库整洁，严格遵循架构设计，删除所有临时文件。

## 关键实践
- 调试前必须先分析是否可以在现有代码中直接修改，而非创建新文件
- 禁止创建新目录或新文件进行调试，除非现有架构中完全不支持
- 所有调试用临时脚本必须在问题解决后立即删除
- 调试代码必须严格按照项目架构设计规范实现，不允许违反分层结构
- 对现有功能的修复应直接在原始文件中进行，不创建副本

## 调试流程规范
1. 首先分析问题根源，确定需要修改的代码
2. 优先考虑在现有代码中直接修改，不创建新文件
3. 如必须创建临时调试脚本，必须放在正确的架构层次中
4. 测试验证修复有效后，将必要的修改整合到现有代码中
5. **立即删除所有临时调试脚本和文件**
6. 提交修复前再次确认没有遗留临时文件

## 调试代码标记
- 必须使用统一的注释格式标记临时调试代码：`# DEBUG: [说明] - [日期] - [开发者]`
- 所有临时调试代码必须有明确的到期日期
- CI必须检测并阻止带有调试标记的代码合并到主分支

## 调试代码清理检查清单
- 删除所有以"debug_"、"temp_"等开头的临时文件
- 删除所有注释掉的调试代码
- 删除所有print语句和调试日志语句
- 确保日志级别恢复到适当设置
- 验证没有遗留测试数据和临时配置

## 架构遵循要点
- 调试代码必须放置在与被调试功能相同的架构层次
- 禁止为调试方便而违反层次依赖关系
- 禁止使用硬编码路径、配置和凭证
- 调试工具必须放置在工具层(src/utils/)

## 紧急修复例外
- 生产环境紧急修复可临时豁免部分规则，但必须：
  1. 在PR中明确标注豁免的规则
  2. 设定明确的技术债务解决期限
  3. 创建后续任务修复技术债务

## 文件参考
- @src/utils/
- @tests/
---
description: 代码重构和分析规范，确保代码质量和一致性
globs: ["**/*.py"]
alwaysApply: true
priority: 90
---
# 代码分析与重构规范

## 代码分析优先原则
- 开始任何实现前必须先检查现有代码库
- 使用相似功能的关键词进行搜索，确认是否已有实现
- 新代码必须与现有代码保持一致的命名风格和设计模式
- 优先扩展现有类和方法，而非创建重复功能

## 强制删除旧代码原则
- **重要**: 移动或重构功能后，必须立即删除旧文件和旧代码，不允许保留冗余实现
- 所有迁移到新文件的代码，必须完全删除原始文件
- 代码重构完成后，必须确认所有旧实现已被删除，不得遗留
- 任何重构操作必须包含"删除旧文件"作为必要步骤，这是不可省略的

## 目录分析步骤
1. 分析项目根目录结构，了解大致组织方式
2. 检查src目录下的模块分布
3. 查阅相关模块的代码实现
4. 搜索类似功能或方法名，确认是否已经存在

## 重构完整流程
1. 全文搜索找出所有对旧代码的引用
2. 设计重构方案，确保架构合理性
3. 实现新功能，保持与原有功能一致
4. 逐步更新引用点，指向新实现
5. 验证功能完整性（运行相关测试）
6. **删除旧代码文件** - 这是必须完成的步骤

## 清理检查清单
- 移除不再使用的导入语句
- 删除无引用的旧代码文件
- 清理空目录
- 移除注释掉的旧代码
- 确保测试覆盖重构的功能

## 自测验证机制
- 运行受影响功能的单元测试
- 验证集成测试通过
- 确认没有引用到已删除的文件或类

## 文件参考
- @src/core/base/
- @src/web/
- @src/utils/
- @tests/
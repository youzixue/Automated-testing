---
description: 确保代码遵循版本控制最佳实践，包括提交消息格式和分支管理策略
globs: ["**/*"]
alwaysApply: true
priority: 30
---
# 版本控制规范

所有代码必须遵循统一的版本控制规范，确保代码历史清晰可追溯。

## 关键实践
- 使用语义化版本号(SemVer)管理软件版本
- 遵循约定式提交(Conventional Commits)格式
- 实施特性分支工作流(Feature Branch Workflow)
- 定期合并主分支到特性分支避免冲突

## 提交消息格式
<类型>[可选作用域]: <描述>
[可选正文]
[可选页脚]

类型必须是以下之一:
- feat: 新功能
- fix: 修复bug
- docs: 仅文档变更
- style: 不影响代码含义的变化(空白、格式化等)
- refactor: 既不修复错误也不添加功能的代码变更
- perf: 提高性能的代码变更
- test: 添加或修正测试
- chore: 对构建过程或辅助工具和库的更改

## 分支命名规范
- 主分支: main
- 开发分支: develop
- 特性分支: feature/[功能名称]
- 修复分支: fix/[问题编号]
- 发布分支: release/[版本号]

## 文件参考
- @.gitignore
- @.github/workflows/